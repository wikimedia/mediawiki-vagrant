<?php
// This file is managed by Puppet.
// See puppet/modules/mediawiki/templates/multiwiki/CommonSettings.php.erb

if ( PHP_SAPI !== 'cli' ) {
	header( 'Cache-control: no-cache' );
}

if ( isset( $_SERVER['SERVER_ADDR'] ) ) {
	ini_set( 'error_append_string', ' (' . $_SERVER['SERVER_ADDR'] . ')' );
}

// Load config so we can check for the number of available wikis below
include_once __DIR__ . '/LoadWgConf.php';

if ( defined( 'MW_PHPUNIT_TEST' ) ) {
	// Bootstrap multiversion when running unit tests
	// Needs to happen before MWMultiVersion + db count check
	require_once '<%= @script_dir %>/MWMultiVersion.php';
	MWMultiVersion::initializeForMaintenance();
}

if ( !class_exists( 'MWMultiVersion' ) && count( $wgLocalDatabases ) > 1
	&& !getenv('NO_MWSCRIPT')
) {
	// T123143: Require mwscript for running scripts on wikifarm
	echo "The mwscript command must be used in multiwiki setups.\n\n";
	echo "Try: mwscript {$argv[0]} --wiki=wiki " .
		implode( ' ', array_slice( $argv, 1 ) ) . "\n";
	echo "If you are sure you know what you are doing and don't want to use mwscript, " .
		"prefix the command with NO_MWSCRIPT=1:\n";
	echo "NO_MWSCRIPT=1 {$argv[0]}\n";
	exit(1);
}

// Ensure that MWMultiVersion has been loaded
require_once '<%= @script_dir %>/MWMultiVersion.php';
$multiVersion = MWMultiVersion::getInstance();
if ( $multiVersion === null ) {
	$multiVersion = MWMultiVersion::initializeForWiki( '<%= scope['::mediawiki::db_name'] %>' );
}

$wgHooks['wfShellWikiCmd'][] = 'MWMultiVersion::onWfShellMaintenanceCmd';

// Extract globals using multiversion supplied database name
$wgDBname = $multiVersion->getDatabase();
$wgConf->extractAllGlobals( $wgDBname );

// T119999: Cross-wiki notification database
$wgExternalServers['<%= @extension_db_cluster %>'] = array(
	array(
		'host' => '<%= @db_host %>',
		'user' => '<%= @extension_cluster_db_user %>',
		'password' => '<%= @extension_cluster_db_pass %>',
		'dbname' => '<%= @extension_cluster_shared_db_name %>',
		'type' => 'mysql',
		'load' => 1,
		'flags' => DBO_DEBUG | DBO_DEFAULT,
	),
);

/**
 * @var array $wmvActiveExtensions List of extensions enabled for the wiki
 * Populated by settings.d files generated by ::mediawiki::extension and
 * used to power the `wikihasextension` script.
 */
$wmvActiveExtensions = array();

foreach(
	array_merge(
		// Settings from default wiki
		glob( '/vagrant/settings.d/puppet-managed/*.php' ),
		glob( '/vagrant/settings.d/*.php' ),
		// Settings for this wiki
		glob( __DIR__ . "/$wgDBname/settings.d/puppet-managed/*.php" ),
		glob( __DIR__ . "/$wgDBname/settings.d/*.php" )
	) as $conffile
) {
	include_once $conffile;
}

// T183302: Mutate $wgServer *after* local settings changes
if ( PHP_SAPI !== 'cli' ) {
	// T68399: set wgServer from inbound request
	$wgServer = WebRequest::detectServer();
}
// Ugly hack to update $wgServer to use HTTPS URL when the HTTPS role is active.
// This is needed in both web and CLI, especially for mediawiki::import::text which
// parses wikitext in a CLI context.
if ( isset( $mwvSupportsHttps ) && $mwvSupportsHttps ) {
	call_user_func( function () {
		global $wgServer, $wgCanonicalServer, $wgConf;
		$fixWgServerCallback = function ( $server ) {
			$server = preg_replace( '#^(http:)?//#', 'https://', $server );
			$httpPort = '<%= scope['forwarded_port'] %>';
			$httpsPort = '<%= scope['forwarded_https_port'] %>';
			return str_replace( ":$httpPort", ":$httpsPort", $server );
		};
		$wgServer = $fixWgServerCallback( $wgServer );
		$wgCanonicalServer = $wgServer;
		foreach ( $wgConf->settings['wgServer'] ?? [] as $dbname => $_ ) {
			$wgConf->settings['wgServer'][$dbname] = $fixWgServerCallback( $wgConf->settings['wgServer'][$dbname] );
			$wgConf->settings['wgCanonicalServer'][$dbname] = $wgConf->settings['wgServer'][$dbname];
		}
	} );
}
